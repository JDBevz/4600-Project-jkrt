/*
CFG for PL
Written in the format that can be checked on http://smlweb.cpsc.ucalgary.ca/ and http://mdaines.github.io/grammophone/

Terminals are written with a lowercase, number, or punctuation at the start
non terminals start with uppercase letters, and then any legal characters
Start symbol is the first one written
Separate right hand side with spaces, terminate with a period

Note : the tool doesn't allow for some punctuation we need in our language they are represented as such : (some will be written just for convenience of reading)
:=	assign
[	leftBracket
[	rightBracket
[]	guard
.	period
$	comment
=	equal
<	lessThan
>	greaterThan
*	times
/	divide
+	plus
-	minus
\	modulo
->	arrow
&	and
|	or
~	not

comments == /* */

*/

Program -> Block period .
Block -> begin DefinitionPart StatementPart end .
DefinitionPart -> {Definition ;} . /* possible empty string */
Definition -> ConstantDefinition | VariableDefinition | ProcedureDefinition .
ConstantDefinition -> const ConstantName = Constant .
VariableDefinition -> TypeSymbol VariableList | TypeSymbol array VariableList leftBracket Constant rightBracket .
TypeSymbol -> integer | boolean
VariableList -> VariableName { , VariableName } .
ProcedureDefinition -> proc ProcedureName Block .
StatementPart -> { Statement ; } .
Statement -> EmptyStatement | ReadStatement | WriteStatement | AssignmentStatement | ProcedureStatement | IfStatement | DoStatement .
EmptyStatement -> skip .
ReadStatement -> read VariableAccessList .
VariableAccessList -> VariableAccess { , VariableAccess } .
WriteStatement -> write ExpressionList .
ExpressionList -> Expression { , Expression } . 
AssignmentStatement -> VariableAccessList assign ExpressionList.
ProcedureStatement -> call ProcedureName .
IfStatement -> if GuardedCommandList fi .
DoStatement -> do GuardedCommandList od .
GuardedCommandList -> GuardedCommand { guard GuardedCommand } .
Expression -> PrimaryExpression { PrimaryOperator PrimaryExpression } .
PrimaryOperator -> and | or .
PrimaryExpression -> SimpleExpression [ RelationalOperator SimpleExpression ] .
RelationalOperator -> lessThan | greaterThan | equal .
SimpleExpression -> [ minus ] Term { AddingOperator Term } .
AddingOperator -> plus | minus .
Term -> Factor { MultiplyingOperator Factor } .
MultiplyingOperator -> times | divide | modulo . 
Factor -> Constant | VariableAccess | ( Expression ) | not Factor .
VariableAccess -> VariableName [ IndexedSelector ] .
IndexedSelector -> leftBracket Expression rightBracket .
Constant -> Numeral | BooleanSymbol | ConstantName .
Numeral -> Digit { Digit } .
BooleanSymbol -> false | true .
Name -> Letter { Letter | Digit | underscore } .
Digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 .
Letter -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z . /* obviously also capital letters in the real language */











